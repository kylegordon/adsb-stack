version: '3.4'

# Lots of useful info at https://github.com/mikenye/docker-readsb/wiki/Guide-to-ADS-B-Data-Receiving%2C-Decoding-and-Sharing%2C-Leveraging-RTLSDR-and-Docker

volumes:
  flightairmap_db:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/docker_nfs/flightairmap_db/"
  flightairmap_webapp:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/docker_nfs/flightairmap_webapp/"
  graphs1090_rrd:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/docker_nfs/graphs1090_rrd/"
  vrsconfig:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/docker_nfs/vrsconfig/"
  readsbpb_rrd:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/docker_nfs/readsbpb_rrd"
  readsbpb_autogain:
    driver: local
    driver_opts:
      type: nfs4
      o: addr=172.24.32.5,rw
      device: ":/srv/nfs4/store/docker_nfs/readsbpb_autogain"

networks:
  adsbnet:

services:
  readsb:
    deploy:
      placement:
        constraints:
          - "node.hostname==planepi"
    # Not actually required until hardware is present
    # Credit to https://github.com/mikenye/docker-readsb
    image: ghcr.io/sdr-enthusiasts/docker-readsb-protobuf:latest
    privileged: true
    tty: true
    container_name: readsb
    restart: unless-stopped
    devices:
      - /dev/bus/usb
    ports:
      - 8080:8080
      - 30005:30005
    networks:
      - adsbnet
    environment:
      - TZ=${TZ}
      - READSB_DCFILTER=true
      - READSB_DEVICE_TYPE=rtlsdr
      - READSB_FIX=true
      - READSB_GAIN=autogain
      - READSB_LAT=${LATITUDE}
      - READSB_LON=${LONGITUDE}
      - READSB_MODEAC=true
      - READSB_RX_LOCATION_ACCURACY=2
      - READSB_STATS_RANGE=true
      - READSB_NET_ENABLE=true
    volumes:
      - readsbpb_rrd:/run/collectd
      - readsbpb_autogain:/run/autogain
    logging:
      driver: gelf
      options:
        gelf-address: "udp://172.24.32.13:12201"
        tag: "{{.Name}}"

  piaware:
    # Working feed
    # Credit to https://github.com/mikenye/docker-piaware
    image: ghcr.io/sdr-enthusiasts/docker-piaware:latest
    tty: true
    container_name: piaware
    restart: unless-stopped
    # Forego USB devices in favour of BEASTHOST and BEASTPORT
    # devices:
    #   - /dev/bus/usb/001/004:/dev/bus/usb/001/004
    ports:
      - 8083:8080
      - 30003:30003
      - 30005:30005
    networks:
      - adsbnet
    environment:
      - TZ=${TZ}
      - LAT=${LATITUDE}
      - LONG=${LONGITUDE}
      - BEASTHOST=${BEASTHOST}
      - BEASTPORT=30005
      - FEEDER_ID=${PIAWARE_FEEDERID}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://172.24.32.13:12201"
        tag: "{{.Name}}"

  adsbexchange:
    # Working feed
    # Credit to https://github.com/mikenye/docker-adsbexchange
    image: ghcr.io/sdr-enthusiasts/docker-adsbexchange
    tty: true
    container_name: adsbx
    restart: unless-stopped
    networks:
      - adsbnet
    environment:
      - BEASTHOST=${BEASTHOST}
      - BEASTPORT=30005
      - TZ=${TZ}
      - LAT=${LATITUDE}
      - LONG=${LONGITUDE}
      - ALT=50m
      - SITENAME=kylegordon_viewpoint
      - UUID=${ADSBEXCHANGE_UUID}
      - ADSB_FEED_DESTINATION_HOSTNAME=feed.adsbexchange.com
      - MLAT_FEED_DESTINATION_HOSTNAME=feed.adsbexchange.com

  adsbfi:
    # Working feed
    # Credit to https://github.com/mikenye/docker-adsbexchange
    image: ghcr.io/sdr-enthusiasts/docker-adsbexchange
    tty: true
    container_name: adsbfi
    restart: unless-stopped
    networks:
      - adsbnet
    environment:
      - BEASTHOST=${BEASTHOST}
      - BEASTPORT=30005
      - TZ=${TZ}
      - LAT=${LATITUDE}
      - LONG=${LONGITUDE}
      - ALT=50m
      - SITENAME=kylegordon_viewpoint
      - UUID=${ADSBEXCHANGE_UUID}
      - ADSB_FEED_DESTINATION_HOSTNAME=feed.adsb.fi
      - MLAT_FEED_DESTINATION_HOSTNAME=feed.adsb.fi
    logging:
      driver: gelf
      options:
        gelf-address: "udp://172.24.32.13:12201"
        tag: "{{.Name}}"

  # Multifeeder can probably replace adsbfi and adsbx containers
  multifeeder:
    image: ghcr.io/sdr-enthusiasts/docker-multifeeder
    tty: true
    container_name: multifeeder
    hostname: multifeeder
    restart: always
    environment:
        - TZ=${TZ}
        - READSB_NET_CONNECTOR=${BEASTHOST},{BEASTPORT},beast_in;feed.theairtraffic.com,30004,beast_out;
        - MLAT_USER=SITE_NAME
        - MLAT_CONFIG=feed.theairtraffic.com,31090
        - READSB_LAT=${LATITUDE}
        - READSB_LON=${LONGITUDE}
        - READSB_ALT=${ALTITUDE_METERS}m
    tmpfs:
        - /run/readsb
        - /var/log

  fr24feed:
    # Working feed
    # Credit to https://github.com/mikenye/docker-flightradar24
    image: mikenye/fr24feed:latest
    tty: true
    container_name: fr24feed
    restart: unless-stopped
    ports:
      - 8754:8754
    networks:
      - adsbnet
    environment:
      - TZ=${TZ}
      - BEASTHOST=${BEASTHOST}
      - MLAT=yes
      - FR24KEY=6151e7a51a5177cc
    logging:
      driver: gelf
      options:
        gelf-address: "udp://172.24.32.13:12201"
        tag: "{{.Name}}"
    labels:
      - flame.type=application # "app" works too
      - flame.name=FR24Feed
      - flame.url=http://viewpoint.house:8754
      - flame.icon=plane
      - com.centurylinklabs.watchtower.enable=true

  # FIXME #1 RBFeeder core dumping frequently
  # Fault of Radarbox hardcoding for Pi hardware. No workaround
  # rbfeeder:
  #   # https://www.radarbox.com/stations/EXTRPI009736
  #   # Credit to https://github.com/mikenye/docker-radarbox
  #   image: mikenye/radarbox:latest
  #   tty: true
  #   container_name: rbfeeder
  #   restart: unless-stopped
  #   networks:
  #     - adsbnet
  #   # volumes:
  #   #   - /tmp/24:/sys/class/thermal/thermal_zone0/temp:ro
  #   environment:
  #     - TZ=${TZ}
  #     - BEASTHOST=${BEASTHOST}
  #     - LAT=${LATITUDE}
  #     - LONG=${LONGITUDE}
  #     - ALT=90
  #     - SHARING_KEY=${RBFEEDER_KEY}

  pfclient:
    # Working feed
    # Credit to https://github.com/mikenye/docker-planefinder
    image: ghcr.io/sdr-enthusiasts/docker-planefinder:latest
    tty: true
    container_name: pfclient
    restart: unless-stopped
    ports:
      - 30053:30053
    networks:
      - adsbnet
    environment:
      - TZ=${TZ}
      - BEASTHOST=${BEASTHOST}
      - LAT=${LATITUDE}
      - LONG=${LONGITUDE}
      - SHARECODE=${PLANEFINDER_KEY}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://172.24.32.13:12201"
        tag: "{{.Name}}"
    labels:
      - flame.type=application # "app" works too
      - flame.name=PlaneFinder Client
      - flame.url=http://viewpoint.house:30053
      - flame.icon=plane
      - com.centurylinklabs.watchtower.enable=true

  opensky:
    # Credit to https://github.com/mikenye/docker-opensky-network
    image: ghcr.io/sdr-enthusiasts/docker-opensky-network:latest
    tty: true
    container_name: opensky
    restart: unless-stopped
    environment:
      - TZ=${TZ}
      - BEASTHOST=${BEASTHOST}
      - LAT=${LATITUDE}
      - LONG=${LONGITUDE}
      - ALT=${ALTITUDE_METERS}
      - OPENSKY_USERNAME=${OPENSKY_USERNAME}
      - OPENSKY_SERIAL=${OPENSKY_SERIAL}
    labels:
      - com.centurylinklabs.watchtower.enable=true

  flightairmap:
    # Credit to https://github.com/mikenye/docker-flightairmap
    image: mikenye/flightairmap:latest
    tty: true
    container_name: flightairmap
    restart: always
    ports:
      - 8087:80
    healthcheck:
      test: ["CMD", "wget", "--spider", "-tries=1", "--quiet", "http://viewpoint.house:8087"]
      start_period: 60s
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      - TZ=${TZ}
      - BASESTATIONHOST=${BEASTHOST}
      - FAM_INSTALLPASSWORD="very_secure_password_12345"
    volumes:
      - flightairmap_db:/var/lib/mysql
      - flightairmap_webapp:/var/www/flightairmap
    labels:
      - flame.type=application # "app" works too
      - flame.name=FlightAirMap
      - flame.url=http://viewpoint.house:8087
      - flame.icon=plane
      - com.centurylinklabs.watchtower.enable=true

  # FIXME #2 Finish Virtual Radar Server setup

  # virtualradarserver:
  #   # Credit to https://github.com/mikenye/docker-virtualradarserver
  #   image: vrstest:latest
  #   tty: true
  #   container_name: vrs
  #   restart: unless-stopped
  #   volumes:
  #     - vrsconfig:/config
  #   ports:
  #     - 8077:8080
  #   environment:
  #     - USERNAME=vrsadmin
  #     - PASSWORD=vrsadmin
  #     - BASESTATIONHOST=${BEASTHOST}

  adsb2influxdb:
    # Working service
    # Credit to https://github.com/mikenye/docker-adsb-to-influxdb
    image: ghcr.io/sdr-enthusiasts/docker-adsb-to-influxdb:latest
    tty: true
    container_name: adsb2influxdb
    restart: unless-stopped
    environment:
      - TZ="Europe/London"
      - INFLUXDBURL=http://172.24.32.13:8086
      - ADSBHOST=${BEASTHOST}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://172.24.32.13:12201"
        tag: "{{.Name}}"

  graphs1090:
    # Credit to https://github.com/mikenye/docker-graphs1090
    image: mikenye/graphs1090:latest
    tty: true
    container_name: graphs1090
    restart: always
    volumes:
      - graphs1090_rrd:/var/lib/collectd/rrd
    ports:
      - 8088:80
    networks:
      - adsbnet
    environment:
      - BEASTHOST=${BEASTHOST}
      - MLATHOST=piaware
      - TZ=${TZ}
      - LAT=${LATITUDE}
      - LONG=${LONGITUDE}
    logging:
      driver: gelf
      options:
        gelf-address: "udp://172.24.32.13:12201"
        tag: "{{.Name}}"
    healthcheck:
      test: ["CMD", "wget", "--spider", "-tries=1", "--quiet", "http://viewpoint.house:8088"]
      start_period: 60s
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      - flame.type=application # "app" works too
      - flame.name=Graphs1090
      - flame.url=http://viewpoint.house:8088
      - flame.icon=plane
      - com.centurylinklabs.watchtower.enable=true
